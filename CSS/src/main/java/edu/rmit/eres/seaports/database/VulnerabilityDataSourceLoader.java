/**
 * Copyright (c) 2013, RMIT University, Australia.
 * All rights reserved.
 * 
 * This code is under the BSD license. See 'license.txt' for details.
 * Project hosted at: https://code.google.com/p/climate-smart-seaports/
 */
package edu.rmit.eres.seaports.database;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.ImprovedNamingStrategy;
import org.hibernate.tool.hbm2ddl.SchemaExport;

import edu.rmit.eres.seaports.model.*;

/**
 * Class used to load CSIRO Data Source in the database
 * @author Guillaume Prevost
 */
@SuppressWarnings("deprecation")
public class VulnerabilityDataSourceLoader {

	/**
	 * Main method used to load  the CSIRO Data Source only.
	 * On an existing database, this may duplicate data.
	 * @param args: no parameters
	 */
	public static void main(String[] args)
	{
		AnnotationConfiguration config = new AnnotationConfiguration();
		config.setNamingStrategy(ImprovedNamingStrategy.INSTANCE);
		config.configure("hibernate.cfg.xml");
		new SchemaExport(config).create(true,true);

		SessionFactory factory = config.buildSessionFactory();
		Session session = factory.getCurrentSession();
		session.beginTransaction();	
		
		LoadVulnerabilityDataSource(session);
		
		session.getTransaction().commit();
	}
	
	/**
	 * Loads the Vulnerability Assessment Data Source in the database
	 * @param session: the Hibernate Session object which takes care of persisting objects in the database
	 */
	public static void LoadVulnerabilityDataSource(Session session)
	{
		// Display Types offered by this data source
		DisplayType graphDisplayType = (DisplayType)(session.get(DisplayType.class, 2));
		DisplayType tableDisplayType = (DisplayType)(session.get(DisplayType.class, 3));
		
		List<DisplayType> displayTypesVulnerability = new ArrayList<DisplayType>();
		displayTypesVulnerability.add(graphDisplayType);
		displayTypesVulnerability.add(tableDisplayType);
		
		
		// Data Source
		VulnerabilityDataSource dsVulnerability = new VulnerabilityDataSource("vulnerability", "Vulnerability Assessment", null, null, displayTypesVulnerability);
		
		// Parameters Weather Event Type
		DataSourceParameter weatherEventTypeParam = new DataSourceParameter("Weather Event", "<p>Disruptive climate-related events are those that caused a significant alteration to the &quote;normal&quot; functioning of the port, whether this was for a few hours, or a few weeks.</p>",
				dsVulnerability, null, DataSourceParameter.Display.DROPDOWN);		
		session.save(weatherEventTypeParam);
		DataSourceParameterOption weatherEventTypeHeatwave = new DataSourceParameterOption("Heatwave", "Heatwave", weatherEventTypeParam, 1);
		session.save(weatherEventTypeHeatwave);
		DataSourceParameterOption weatherEventTypeWind = new DataSourceParameterOption("Strong wind", "Strong wind", weatherEventTypeParam, 2);
		session.save(weatherEventTypeWind);
		DataSourceParameterOption weatherEventTypeRain = new DataSourceParameterOption("Heavy rain", "Heavy rain", weatherEventTypeParam, 3);
		session.save(weatherEventTypeRain);
		DataSourceParameterOption weatherEventTypeElecStorm = new DataSourceParameterOption("Electrical storm", "Electrical storm", weatherEventTypeParam, 4);
		session.save(weatherEventTypeElecStorm);
		DataSourceParameterOption weatherEventTypeStorm = new DataSourceParameterOption("Storm (wind and rain combined)", "Storm (wind and rain combined)", weatherEventTypeParam, 5);
		session.save(weatherEventTypeStorm);
		DataSourceParameterOption weatherEventTypeCyclone = new DataSourceParameterOption("Cyclone", "Cyclone", weatherEventTypeParam, 6);
		session.save(weatherEventTypeCyclone);
		DataSourceParameterOption weatherEventTypeHail = new DataSourceParameterOption("Hail", "Hail", weatherEventTypeParam, 7);
		session.save(weatherEventTypeHail);
		DataSourceParameterOption weatherEventTypeStormSurge = new DataSourceParameterOption("Storm surge", "Storm surge", weatherEventTypeParam, 8);
		session.save(weatherEventTypeStormSurge);
		DataSourceParameterOption weatherEventTypeSeaLevelRise = new DataSourceParameterOption("Sea level rise", "Sea level rise", weatherEventTypeParam, 9);
		session.save(weatherEventTypeSeaLevelRise);
		DataSourceParameterOption weatherEventTypeFog = new DataSourceParameterOption("Fog", "Fog", weatherEventTypeParam, 10);
		session.save(weatherEventTypeFog);
		DataSourceParameterOption weatherEventTypeDrought = new DataSourceParameterOption("Drought", "Drought", weatherEventTypeParam, 11);
		session.save(weatherEventTypeDrought);
		DataSourceParameterOption weatherEventTypeFlood = new DataSourceParameterOption("Flood", "Flood", weatherEventTypeParam, 12);
		session.save(weatherEventTypeFlood);
		DataSourceParameterOption weatherEventTypeOther = new DataSourceParameterOption("Other", "Other", weatherEventTypeParam, 13);
		session.save(weatherEventTypeOther);
		
		// Parameter Date
		DataSourceParameter dateParam = new DataSourceParameter("Date", "<p>The year the disruptive event occured</p>",
				dsVulnerability, null, DataSourceParameter.Display.DROPDOWN);		
		session.save(dateParam);
		int currentYear = Calendar.getInstance().get(Calendar.YEAR);
		int i = 1;
		for (Integer year = currentYear - 10; year <= currentYear; year++) {
			DataSourceParameterOption weatherEventYear = new DataSourceParameterOption(year.toString(), year.toString(), dateParam, i);
			session.save(weatherEventYear);
			i++;
		}
		
		// Parameter "Direct or Indirect"
		DataSourceParameter climateEmissionScnParam = new DataSourceParameter("Direct or indirect impact", "<p>Direct impacts are those that specifically impacted the port, for example, heavy rain on site. Indirect impacts are those that impacted the supply chain to the port, causing a flow-on impact to the port business. Select either Direct or Indirect. If the event caused both Direct and Indirect impacts, select the one that was MORE significant.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(climateEmissionScnParam);
		DataSourceParameterOption mediumEmScn = new DataSourceParameterOption("Direct", "1", climateEmissionScnParam, 1);
		session.save(mediumEmScn);
		DataSourceParameterOption highEmScn = new DataSourceParameterOption("Indirect", "0", climateEmissionScnParam, 2);
		session.save(highEmScn);
		
		// Impact
		DataSourceParameter impactParam = new DataSourceParameter("Impact", "<p>Describe how the climate related event impacted your business. E.g.: Rain caused onsite flooding; the cyclone damaged rail-lines from suppliers to the port.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.TEXT);
		session.save(impactParam);
		session.save(new DataSourceParameterOption("", "", impactParam, 1));
		
		
		// Rating of the consequence of events
		DataSourceParameter lostTimeConsequence = new DataSourceParameter("Lost time due to staff or contractor injuries", "<p>A lost-time injury is one that resulted in a fatality, permanent disability or time lost from work of one day/shift or more.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(lostTimeConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", lostTimeConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", lostTimeConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", lostTimeConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", lostTimeConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", lostTimeConsequence, 5));
		
		DataSourceParameter staffConsequence = new DataSourceParameter("Staff not able to attend work", "<p>Events outside the port may restrict staff access, E.g.: staff are in the local CFA, and fighting fires during heatwave</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(staffConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", staffConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", staffConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", staffConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", staffConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", staffConsequence, 5));
		
		DataSourceParameter costConsequence = new DataSourceParameter("Increased annual Workcover costs", "", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(costConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", costConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", costConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", costConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", costConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", costConsequence, 5));
		
		DataSourceParameter maintenanceCostConsequence = new DataSourceParameter("Increased maintenance costs", "", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(maintenanceCostConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", maintenanceCostConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", maintenanceCostConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", maintenanceCostConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", maintenanceCostConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", maintenanceCostConsequence, 5));
		
		DataSourceParameter capitalConsequence = new DataSourceParameter("Deferment of capital expenditure", "", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(capitalConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", capitalConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", capitalConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", capitalConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", capitalConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", capitalConsequence, 5));
		
		DataSourceParameter insuranceCostConsequence = new DataSourceParameter("Increased insurance costs", "<p>Insurance premiums may increase due to direct impacts on the port, or due to the perceived increased risk to the area</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(insuranceCostConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", insuranceCostConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", insuranceCostConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", insuranceCostConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", insuranceCostConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", insuranceCostConsequence, 5));
		
		DataSourceParameter reputationConsequence = new DataSourceParameter("Adverse reputational impact", "<p>Reputation may be affected amongst the local community, or clients and other stakeholders, E.g.: negative media reports; or perceived unreliability of port due to disruption caused by climate event.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(reputationConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", reputationConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", reputationConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", reputationConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", reputationConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", reputationConsequence, 5));
		
		DataSourceParameter environmentConsequence = new DataSourceParameter("Environmental impact", "<p>Any impact on the natural environment caused by port operations as a result of the climate related event, this may be excessive dust due to dry, windy conditions; contaminated water from the site; excessive fumes.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(environmentConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", environmentConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", environmentConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", environmentConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", environmentConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", environmentConsequence, 5));
		
		DataSourceParameter regulatoryConsequence = new DataSourceParameter("Regulatory impact", "<p>Regulatory impact refers to a contravention of a regulation or legal requirement, E.g.; caused by environmental contravention as above, or workforce safety contravention.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(regulatoryConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", regulatoryConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", regulatoryConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", regulatoryConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", regulatoryConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", regulatoryConsequence, 5));
		
		DataSourceParameter logisticsConsequence = new DataSourceParameter("Interruption/halt to logistics operations", "<p>A halt to the moving of goods to and from boats, and across the port; also an impact to storage on site.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(logisticsConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", logisticsConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", logisticsConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", logisticsConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", logisticsConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", logisticsConsequence, 5));
		
		DataSourceParameter boatConsequence = new DataSourceParameter("Interruption to boat movements", "<p>A change in scheduled berthing or departing from berth due to impacts of weather or forecast storms/cyclones.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(boatConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", boatConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", boatConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", boatConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", boatConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", boatConsequence, 5));
		
		DataSourceParameter dredgingConsequence = new DataSourceParameter("Altered dredging schedule", "<p>Dredging activity may increase or decrease after storms or flooding or other weather events.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(dredgingConsequence);
		session.save(new DataSourceParameterOption("No Impact", "0", dredgingConsequence, 1));
		session.save(new DataSourceParameterOption("Insignificant", "1", dredgingConsequence, 2));
		session.save(new DataSourceParameterOption("Moderate", "2", dredgingConsequence, 3));
		session.save(new DataSourceParameterOption("Major", "3", dredgingConsequence, 4));
		session.save(new DataSourceParameterOption("Extreme", "4", dredgingConsequence, 5));
		
		// Other Consequences
		DataSourceParameter consequenceOtherParam = new DataSourceParameter("Other business consequences", "<p>Specify in the text box below any other business consequences not listed above.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.TEXT);
		session.save(consequenceOtherParam);
		session.save(new DataSourceParameterOption("", "", consequenceOtherParam, 1));
		
		// Adequate Response Parameter
		DataSourceParameter responseAdequateParam = new DataSourceParameter("Would you say your response was adequate?", "", 
				dsVulnerability, null, DataSourceParameter.Display.RADIO);
		session.save(responseAdequateParam);
		session.save(new DataSourceParameterOption("Yes", "1", responseAdequateParam, 1));
		session.save(new DataSourceParameterOption("No", "0", responseAdequateParam, 2));
		
		// Changes implemented after event
		DataSourceParameter changesParam = new DataSourceParameter("What were the changes implemented as a result of this event?", "<p>Changes may be to management systems, to safety protocols, maintenance processes, communication protocols and so forth.</p>", 
				dsVulnerability, null, DataSourceParameter.Display.TEXT);
		session.save(changesParam);
		session.save(new DataSourceParameterOption("", "", changesParam, 1));
		
		// Availability of the data source for each seaport
		List<Seaport> seaports = new ArrayList<Seaport>();
		seaports.add((Seaport)(session.get(Seaport.class, "FJLEV")));
		seaports.add((Seaport)(session.get(Seaport.class, "FJSUV")));
		seaports.add((Seaport)(session.get(Seaport.class, "FJLTK")));
		seaports.add((Seaport)(session.get(Seaport.class, "FJSVU")));
		seaports.add((Seaport)(session.get(Seaport.class, "FJLBS")));
		dsVulnerability.setSeaports(seaports);
		
		
		// Availability of data sources for each element category
		List<ElementCategory> categories = new ArrayList<ElementCategory>();
		categories.add((ElementCategory)(session.get(ElementCategory.class, 4))); // Category 4 = Application
		dsVulnerability.setCategories(categories);
		
		session.save(dsVulnerability);
	}
}